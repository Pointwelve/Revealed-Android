// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.pointwelve.revealed.graphql.fragment

import com.apollographql.apollo.api.GraphqlFragment
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ResponseFieldMarshaller
import com.apollographql.apollo.api.ResponseReader
import com.pointwelve.revealed.graphql.type.CustomType
import com.pointwelve.revealed.graphql.type.PostStatus
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class PostDetail(
  val __typename: String = "Post",
  val author: Author,
  /**
   * In Blind. All Page view is calculated when user goes into pagedetail
   */
  val tags: List<Tag>?,
  val topic: Topic,
  val id: String,
  val excerpt: String,
  val subject: String,
  /**
   * MARKDOWN only and unicode (emoji)
   */
  val createdAt: Int,
  val totalLikesCount: Int,
  val totalCommentsCount: Int,
  val postViewCount: Int,
  /**
   * Resolve single invoke
   */
  val status: PostStatus
) : GraphqlFragment {
  override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
    writer.writeString(RESPONSE_FIELDS[0], this@PostDetail.__typename)
    writer.writeObject(RESPONSE_FIELDS[1], this@PostDetail.author.marshaller())
    writer.writeList(RESPONSE_FIELDS[2], this@PostDetail.tags) { value, listItemWriter ->
      value?.forEach { value ->
        listItemWriter.writeObject(value?.marshaller())}
    }
    writer.writeObject(RESPONSE_FIELDS[3], this@PostDetail.topic.marshaller())
    writer.writeCustom(RESPONSE_FIELDS[4] as ResponseField.CustomTypeField, this@PostDetail.id)
    writer.writeString(RESPONSE_FIELDS[5], this@PostDetail.excerpt)
    writer.writeString(RESPONSE_FIELDS[6], this@PostDetail.subject)
    writer.writeInt(RESPONSE_FIELDS[7], this@PostDetail.createdAt)
    writer.writeInt(RESPONSE_FIELDS[8], this@PostDetail.totalLikesCount)
    writer.writeInt(RESPONSE_FIELDS[9], this@PostDetail.totalCommentsCount)
    writer.writeInt(RESPONSE_FIELDS[10], this@PostDetail.postViewCount)
    writer.writeString(RESPONSE_FIELDS[11], this@PostDetail.status.rawValue)
  }

  companion object {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null),
        ResponseField.forObject("author", "author", null, false, null),
        ResponseField.forList("tags", "tags", null, true, null),
        ResponseField.forObject("topic", "topic", null, false, null),
        ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null),
        ResponseField.forString("excerpt", "excerpt", null, false, null),
        ResponseField.forString("subject", "subject", null, false, null),
        ResponseField.forInt("createdAt", "createdAt", null, false, null),
        ResponseField.forInt("totalLikesCount", "totalLikesCount", null, false, null),
        ResponseField.forInt("totalCommentsCount", "totalCommentsCount", null, false, null),
        ResponseField.forInt("postViewCount", "postViewCount", null, false, null),
        ResponseField.forEnum("status", "status", null, false, null)
        )

    val FRAGMENT_DEFINITION: String = """
        |fragment PostDetail on Post {
        |  __typename
        |  author {
        |    __typename
        |    id
        |    username
        |  }
        |  tags {
        |    __typename
        |    name
        |  }
        |  topic {
        |    __typename
        |    name
        |  }
        |  id
        |  excerpt
        |  subject
        |  createdAt
        |  totalLikesCount
        |  totalCommentsCount
        |  postViewCount
        |  status
        |}
        """.trimMargin()

    operator fun invoke(reader: ResponseReader): PostDetail = reader.run {
      val __typename = readString(RESPONSE_FIELDS[0])
      val author = readObject<Author>(RESPONSE_FIELDS[1]) { reader ->
        Author(reader)
      }
      val tags = readList<Tag>(RESPONSE_FIELDS[2]) { reader ->
        reader.readObject<Tag> { reader ->
          Tag(reader)
        }
      }
      val topic = readObject<Topic>(RESPONSE_FIELDS[3]) { reader ->
        Topic(reader)
      }
      val id = readCustomType<String>(RESPONSE_FIELDS[4] as ResponseField.CustomTypeField)
      val excerpt = readString(RESPONSE_FIELDS[5])
      val subject = readString(RESPONSE_FIELDS[6])
      val createdAt = readInt(RESPONSE_FIELDS[7])
      val totalLikesCount = readInt(RESPONSE_FIELDS[8])
      val totalCommentsCount = readInt(RESPONSE_FIELDS[9])
      val postViewCount = readInt(RESPONSE_FIELDS[10])
      val status = PostStatus.safeValueOf(readString(RESPONSE_FIELDS[11]))
      PostDetail(
        __typename = __typename,
        author = author,
        tags = tags,
        topic = topic,
        id = id,
        excerpt = excerpt,
        subject = subject,
        createdAt = createdAt,
        totalLikesCount = totalLikesCount,
        totalCommentsCount = totalCommentsCount,
        postViewCount = postViewCount,
        status = status
      )
    }
  }

  data class Author(
    val __typename: String = "User",
    val id: String,
    val username: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Author.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Author.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Author.username)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null),
          ResponseField.forString("username", "username", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Author = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
        val username = readString(RESPONSE_FIELDS[2])
        Author(
          __typename = __typename,
          id = id,
          username = username
        )
      }
    }
  }

  data class Tag(
    val __typename: String = "Tag",
    val name: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Tag.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Tag.name)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("name", "name", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Tag = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val name = readString(RESPONSE_FIELDS[1])
        Tag(
          __typename = __typename,
          name = name
        )
      }
    }
  }

  data class Topic(
    val __typename: String = "Topic",
    val name: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Topic.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Topic.name)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("name", "name", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Topic = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val name = readString(RESPONSE_FIELDS[1])
        Topic(
          __typename = __typename,
          name = name
        )
      }
    }
  }
}
