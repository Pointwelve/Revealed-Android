// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.pointwelve.revealed.graphql

import com.apollographql.apollo.api.InputFieldMarshaller
import com.apollographql.apollo.api.Mutation
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ResponseFieldMapper
import com.apollographql.apollo.api.ResponseFieldMarshaller
import com.apollographql.apollo.api.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.internal.QueryDocumentMinifier
import com.apollographql.apollo.response.ScalarTypeAdapters
import com.apollographql.apollo.response.ScalarTypeAdapters.DEFAULT
import com.pointwelve.revealed.graphql.fragment.PostDetail
import com.pointwelve.revealed.graphql.type.PostInput
import java.io.IOException
import kotlin.Any
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.Map
import kotlin.jvm.Throws
import kotlin.jvm.Transient
import okio.BufferedSource

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class CreatePostMutation(
  val input: PostInput
) : Mutation<CreatePostMutation.Data, CreatePostMutation.Data, Operation.Variables> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      this["input"] = this@CreatePostMutation.input
    }

    override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller { writer ->
      writer.writeObject("input", this@CreatePostMutation.input.marshaller())
    }
  }

  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = variables
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  data class CreatePost(
    val __typename: String = "Post",
    val fragments: Fragments
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@CreatePost.__typename)
      this@CreatePost.fragments.marshaller().marshal(writer)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): CreatePost = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val fragments = Fragments(reader)
        CreatePost(
          __typename = __typename,
          fragments = fragments
        )
      }
    }

    data class Fragments(
      val postDetail: PostDetail
    ) {
      fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
        writer.writeFragment(this@Fragments.postDetail.marshaller())
      }

      companion object {
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.forFragment("__typename", "__typename", listOf(
              ResponseField.Condition.typeCondition(arrayOf("Post"))
            ))
            )

        operator fun invoke(reader: ResponseReader): Fragments = reader.run {
          val postDetail = readFragment<PostDetail>(RESPONSE_FIELDS[0]) { reader ->
            PostDetail(reader)
          }
          Fragments(
            postDetail = postDetail
          )
        }
      }
    }
  }

  data class Data(
    val createPost: CreatePost
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.createPost.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("createPost", "createPost", mapOf<String, Any>(
            "input" to mapOf<String, Any>(
              "kind" to "Variable",
              "variableName" to "input")), false, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val createPost = readObject<CreatePost>(RESPONSE_FIELDS[0]) { reader ->
          CreatePost(reader)
        }
        Data(
          createPost = createPost
        )
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "4fb7621ecc3c9f9d8d8b2eaf3c56f4ca2f2ffbe352240166c1958af369fd19f6"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |mutation CreatePost(${'$'}input: PostInput!) {
          |  createPost(input: ${'$'}input) {
          |    __typename
          |    ...PostDetail
          |  }
          |}
          |fragment PostDetail on Post {
          |  __typename
          |  author {
          |    __typename
          |    id
          |    username
          |  }
          |  tags {
          |    __typename
          |    name
          |  }
          |  topic {
          |    __typename
          |    name
          |  }
          |  id
          |  excerpt
          |  subject
          |  createdAt
          |  totalLikesCount
          |  totalCommentsCount
          |  postViewCount
          |  status
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = OperationName { "CreatePost" }
  }
}
