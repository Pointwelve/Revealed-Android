// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.pointwelve.revealed.graphql

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ResponseFieldMapper
import com.apollographql.apollo.api.ResponseFieldMarshaller
import com.apollographql.apollo.api.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.internal.QueryDocumentMinifier
import com.apollographql.apollo.response.ScalarTypeAdapters
import com.apollographql.apollo.response.ScalarTypeAdapters.DEFAULT
import com.pointwelve.revealed.graphql.type.CustomType
import java.io.IOException
import kotlin.Array
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.jvm.Throws
import okio.BufferedSource

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
class GetAllConfigsQuery : Query<GetAllConfigsQuery.Data, GetAllConfigsQuery.Data,
    Operation.Variables> {
  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  data class Edge(
    val __typename: String = "Topic",
    val id: String,
    val name: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Edge.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Edge.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Edge.name)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null),
          ResponseField.forString("name", "name", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Edge = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
        val name = readString(RESPONSE_FIELDS[2])
        Edge(
          __typename = __typename,
          id = id,
          name = name
        )
      }
    }
  }

  data class PageInfo(
    val __typename: String = "PageInfo",
    val hasNextPage: Boolean,
    val endCursor: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@PageInfo.__typename)
      writer.writeBoolean(RESPONSE_FIELDS[1], this@PageInfo.hasNextPage)
      writer.writeString(RESPONSE_FIELDS[2], this@PageInfo.endCursor)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forBoolean("hasNextPage", "hasNextPage", null, false, null),
          ResponseField.forString("endCursor", "endCursor", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): PageInfo = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val hasNextPage = readBoolean(RESPONSE_FIELDS[1])
        val endCursor = readString(RESPONSE_FIELDS[2])
        PageInfo(
          __typename = __typename,
          hasNextPage = hasNextPage,
          endCursor = endCursor
        )
      }
    }
  }

  data class GetAllTopics(
    val __typename: String = "TopicConnection",
    val edges: List<Edge>?,
    val pageInfo: PageInfo
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@GetAllTopics.__typename)
      writer.writeList(RESPONSE_FIELDS[1], this@GetAllTopics.edges) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value?.marshaller())}
      }
      writer.writeObject(RESPONSE_FIELDS[2], this@GetAllTopics.pageInfo.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forList("edges", "edges", null, true, null),
          ResponseField.forObject("pageInfo", "pageInfo", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): GetAllTopics = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val edges = readList<Edge>(RESPONSE_FIELDS[1]) { reader ->
          reader.readObject<Edge> { reader ->
            Edge(reader)
          }
        }
        val pageInfo = readObject<PageInfo>(RESPONSE_FIELDS[2]) { reader ->
          PageInfo(reader)
        }
        GetAllTopics(
          __typename = __typename,
          edges = edges,
          pageInfo = pageInfo
        )
      }
    }
  }

  data class Edge1(
    val __typename: String = "Tag",
    val id: String,
    val name: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Edge1.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Edge1.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Edge1.name)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null),
          ResponseField.forString("name", "name", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Edge1 = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)
        val name = readString(RESPONSE_FIELDS[2])
        Edge1(
          __typename = __typename,
          id = id,
          name = name
        )
      }
    }
  }

  data class PageInfo1(
    val __typename: String = "PageInfo",
    val hasNextPage: Boolean,
    val endCursor: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@PageInfo1.__typename)
      writer.writeBoolean(RESPONSE_FIELDS[1], this@PageInfo1.hasNextPage)
      writer.writeString(RESPONSE_FIELDS[2], this@PageInfo1.endCursor)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forBoolean("hasNextPage", "hasNextPage", null, false, null),
          ResponseField.forString("endCursor", "endCursor", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): PageInfo1 = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val hasNextPage = readBoolean(RESPONSE_FIELDS[1])
        val endCursor = readString(RESPONSE_FIELDS[2])
        PageInfo1(
          __typename = __typename,
          hasNextPage = hasNextPage,
          endCursor = endCursor
        )
      }
    }
  }

  data class GetAllTags(
    val __typename: String = "TagConnection",
    val edges: List<Edge1>?,
    val pageInfo: PageInfo1
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@GetAllTags.__typename)
      writer.writeList(RESPONSE_FIELDS[1], this@GetAllTags.edges) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value?.marshaller())}
      }
      writer.writeObject(RESPONSE_FIELDS[2], this@GetAllTags.pageInfo.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forList("edges", "edges", null, true, null),
          ResponseField.forObject("pageInfo", "pageInfo", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): GetAllTags = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])
        val edges = readList<Edge1>(RESPONSE_FIELDS[1]) { reader ->
          reader.readObject<Edge1> { reader ->
            Edge1(reader)
          }
        }
        val pageInfo = readObject<PageInfo1>(RESPONSE_FIELDS[2]) { reader ->
          PageInfo1(reader)
        }
        GetAllTags(
          __typename = __typename,
          edges = edges,
          pageInfo = pageInfo
        )
      }
    }
  }

  data class Data(
    /**
     * First is number of posts. after is nullable
     */
    val getAllTopics: GetAllTopics,
    val getAllTags: GetAllTags
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller { writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.getAllTopics.marshaller())
      writer.writeObject(RESPONSE_FIELDS[1], this@Data.getAllTags.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("getAllTopics", "getAllTopics", null, false, null),
          ResponseField.forObject("getAllTags", "getAllTags", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val getAllTopics = readObject<GetAllTopics>(RESPONSE_FIELDS[0]) { reader ->
          GetAllTopics(reader)
        }
        val getAllTags = readObject<GetAllTags>(RESPONSE_FIELDS[1]) { reader ->
          GetAllTags(reader)
        }
        Data(
          getAllTopics = getAllTopics,
          getAllTags = getAllTags
        )
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "3ec4f9bef68eaa355f73e29a1433ac7dca179344be3fac215312cf437f666734"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query getAllConfigs {
          |  getAllTopics {
          |    __typename
          |    edges {
          |      __typename
          |      id
          |      name
          |    }
          |    pageInfo {
          |      __typename
          |      hasNextPage
          |      endCursor
          |    }
          |  }
          |  getAllTags {
          |    __typename
          |    edges {
          |      __typename
          |      id
          |      name
          |    }
          |    pageInfo {
          |      __typename
          |      hasNextPage
          |      endCursor
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = OperationName { "getAllConfigs" }
  }
}
